package de.infolektuell.gradle.jextract.extensions

import org.gradle.api.Action
import org.gradle.api.Named
import org.gradle.api.file.Directory
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.provider.ListProperty
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Nested

/** A configuration for a library to be generated by Jextract */
abstract class LibraryHandler : Named {
    /** The header file to generate bindings for */
    abstract val header: RegularFileProperty
    /** Additional directories to be appended to include search paths */
    abstract val includes: ListProperty<Directory>
    /** Macros to be defined, in the format `<name>=<value>` */
    abstract val definedMacros: ListProperty<String>
    /** The package name for the generated code */
    abstract val targetPackage: Property<String>
    /** The name for the class generated from the header file, derived from the header file if missing */
    abstract val headerClassName: Property<String>
    /** List of definitions to be included */
    @get:Nested
    abstract val whitelist: WhitelistHandler
    /** Configures the list of definitions to be included */
    fun whitelist(action: Action<in WhitelistHandler>) {
        action.execute(whitelist)
    }
    /** Native libraries to be loaded by generated code (either names or paths starting with colon) */
    abstract val libraries: ListProperty<String>
    /** Load libraries in the library symbol lookup, using either `System.load` or `System.loadLibrary`, useful for libraries in java.library.path */
    abstract val useSystemLoadLibrary: Property<Boolean>
    /** specify the directory to place generated files. */
    abstract val output: DirectoryProperty
}
